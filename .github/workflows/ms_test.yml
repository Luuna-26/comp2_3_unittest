name: MS Build and Test

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./src/UnitTest.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  BUILD_PLATFORM: x64
jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Restore NuGet packages
      working-directory: ${{ github.workspace }}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build using Visual Studio (devenv)
      run: >
        & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\devenv.com"
        "${{ github.workspace }}\src\UnitTest.sln"
        /Build "${{ env.BUILD_CONFIGURATION }}|${{ env.BUILD_PLATFORM }}"
      working-directory: ${{ github.workspace }}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
    
    - name: Setup VSTest.exe
      uses: Malcolmnixon/Setup-VSTest@v4

    - name: Check build output
      run: Get-ChildItem "${{ github.workspace }}\src\UnitTest" -Recurse

    - name: Run Native C++ Unit Tests
      run: vstest.console "${{ github.workspace }}\src\UnitTest\x64\${{ env.BUILD_CONFIGURATION }}\UnitTest.dll" /Platform:x64 /InIsolation /Logger:trx